@page "/device/{id}"
@using System.Text.Json;
@inject NavigationManager uriHelper;
@inject IDeviceService deviceService;
@inject ILogger<DeviceList> logger;
@inject ILocalStorageService _localStorageService;
@inject NavigationManager NavManager;
@inject IPersonService personService;

<h1>Blazor is @ID</h1>

<h3>DeviceSelected</h3>

<h3>@properties</h3>

@if (device == null)
{
}
else
{
    <div>
        @foreach (var property in device.Properties)
        {
            <h3>@property.Key</h3>
            <p>@property.Value.Title</p>
            <p>@property.Value.Description</p>
            <p>@property.Value.Type</p>
            @if (property.Value.Type == "boolean")
            {
                <input type="checkbox" checked="@properties.GetProperty(property.Key).GetBoolean()"
        @onchange="eventArgs => { UpdateHeading(property.Key, eventArgs.Value); }" />
            }
            else if (property.Value.Type == "integer")
            {
                <input type="number" value="@properties.GetProperty(property.Key).GetInt32()" @onchange="eventArgs => { 
                        var value = Int32.Parse(eventArgs.Value.ToString());
                        UpdateHeading(property.Key, value);
                    }" />
            }
            <br /><br />
        }
    </div>
}

@if (@deviceAccessList == null)
{
}
else
{
    <div>
        People who can access this device:
        @foreach (var accesor in deviceAccessList)
        {
            <p>@accesor.Email with @accesor.ControlType access   <span><a type="button" class="btn btn-outline-danger" @onclick="() => RevokeAccess(accesor.Id)">Revoke</a></span></p>
        }
    </div>
}

@code {
    [Parameter]
    public string? ID { get; set; }
    private Device? device = null;
    private IEnumerable<DeviceAccessDto>? deviceAccessList = null;

    protected override void OnInitialized()
    {
        ID = ID ?? "fantastic";
    }

    private JsonElement properties;
    protected override async Task OnInitializedAsync()
    {
        if (await _localStorageService.GetItem<string>("token") != null)
        {
            this.properties = await this.deviceService.Properties(ID);
            this.properties = properties.GetProperty("value");
            this.device = await this.deviceService.GetDevice(ID);

            try {
                this.deviceAccessList = await this.personService.GetAccessListForDevice(ID);
            } catch (Exception e) {
                this.deviceAccessList = null;
            }
        }
        else
        {
            NavManager.NavigateTo("/Login", true);
        }
    }

    public async void UpdateHeading(string propertyName, object value)
    {
        System.Console.WriteLine(value.GetType());
        await this.deviceService.ChangeProperty(ID, propertyName, value);
        this.properties = await this.deviceService.Properties(ID);
        this.properties = properties.GetProperty("value");
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void RevokeAccess(string accessId)
    {
        await this.personService.RevokeAccess(accessId);
        this.deviceAccessList = await this.personService.GetAccessListForDevice(ID);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
